
jsDrLive = "http://www.dr.dk/nu/embed/live?height=467&width=830"
jsDrRadioLive = "http://www.dr.dk/radio/channels/channels.json.drxml/"
apiBaseURL = "http://www.dr.dk/nu/api/%s"
apiBaseRadioWebURL = 'http://www.dr.dk/tjenester/medieapi/api/%s'
bwInt = {"high":1000, "medium":500, "low":250, "auto":20000}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	vc = VideoClipObject()
	


	
	# ON-Demand TV
	if '/se/' in url:
		slug = url.split('/')[6].rsplit('#',1)[0]
		try:
			drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Relations.Slug='%s'" % slug)
		except:
			raise Ex.MediaNotAvailable
		vc.title = drMeta['Data'][0]['Title']
		vc.summary = drMeta['Data'][0]['Description']
		

#	 ON-DEMAND RADIO
	elif '/player/' in url:
		id = url.rsplit('/',1)[1]
		try:
			jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + id)
		except:
			raise Ex.MediaNotAvailable
		vc.title = jsonDrOD['title']
		vc.duration = ( (int(jsonDrOD['duration'].rsplit(':')[0])*360) +(int(jsonDrOD['duration'].rsplit(':')[1])*60)+(int(jsonDrOD['duration'].rsplit(':')[2]))) * 1000
		vc.source_title = jsonDrOD['broadcastChannel']

		if 'broadcastTime' in jsonDrOD:
			if 'Date(' in jsonDrOD['broadcastTime']:
				timestamp = float( jsonDrOD['broadcastTime'].split('(')[1].split('+')[0] ) / 1000
				vc.originally_available_at = Datetime.FromTimestamp(timestamp).date()
			else:
				vc.originally_available_at = Datetime.ParseDate(jsonDrOD['broadcastTime']).date()
	return vc

####################################################################################################
def MediaObjectsForURL(url):

	mol = []
	
	# ON-DEMAND TV
	if '/se/' in url:
		slug = url.split('/')[6].rsplit('#',1)[0]
#		time = url.rsplit('#!/')[1]
		Log.Debug(slug)
		Log.Debug('*************')
		drMeta = JSON.ObjectFromURL("http://www.dr.dk/mu/ProgramCard?Slug='%s'" % slug)['Data'][0]
		if drMeta.get('Assets'):
			for assets in drMeta['Assets']:
				if assets.get('Kind') == "VideoResource":
					drAsset = JSON.ObjectFromURL(assets['Uri']+'?format=pmm')
					for links in drAsset['Links']:
						if links['Target'] != 'Download':
							mo = MediaObject()
							mo.bitrate = links['Bitrate']
							mo.aspect_ratio = int(links['Width']) / int(links['Height'])
							mo.duration = int(drAsset.get('DurationInMilliseconds', -1))
							
							po = PartObject()
							if links['Target'] == 'Android':
								po.key = links['Uri']
							elif links['Target'] == 'Ios':
								po.key = links['Uri']
							elif links['Target'] == 'Streaming':
								po.key = RTMPVideoURL(links['Uri'].split('mp4:')[0], clip = 'mp4:%s' % links['Uri'].split('mp4:')[1], height = links.get('Height'), width = links.get('Width'), Live = False)
							else:
								po.key = links['Uri']
							mo.add(po)
							mol.append(mo)
							
						
					#===========================================================
					# for links in drAsset.get('links'):
					#	mo = MediaObject()
					#	if 'bitrateKbs' in links: mo.bitrate = links.get('bitrateKbs')
					#	if links.get('fileType') == 'mp4':
					#		
					#		po = PartObject()
					#		VideoUrl = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1] )
					#		VideoUrl.width = links.get('width')
					#		VideoUrl.height = links.get('height')
					#		if 'width' not in links and 'height' not in links:
					#			mo.video_resolution = 'SD'
					#		VideoUrl.live = False 
					#		mo.add(po)
					#		mol.append( mo)
					#	elif links.get('filetype') == 'wmv':
					#		mol.append( MediaObject(bitrate = links.get('bitrateKbps', None),parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=links.get('width', None), height=links.get('height', None)))]))
					#	
					#	
					#===========================================================
					break
					
#			Log.Debug(drMeta['Assets'])
		else:
			Log.Debug('ikk saa meget')
			Log.Debug(url)
					
		
	return mol


####################################################################################################
#
# For later use, when implementing Radio

#===============================================================================
# @deferred
# def ondemandRadioFromURL(url):
# 
#	mol = []
#	mo = MediaObject()
#	id = url.rsplit('/',1)[1]
#	try:
#		jsonDrOD = JSON.ObjectFromURL(apiBaseRadioWebURL % 'MediaItem/' + str(id))
#	except:
#		raise Ex.MediaNotAvailable
# 
#	try:	
#		jsonMedia =  JSON.ObjectFromURL(jsonDrOD['mediaItemResourceUrl'])
# 
#		for links in jsonMedia['links']:
#			if links['fileType'] == 'mp4':
#				mo = MediaObject(video_resolution = 1080, audio_channels = 2, aspect_ratio = int(0 if 'width' not in links else links['width'])/int(0 if 'height' not in links else links['height']), video_codec = VideoCodec.H264, container = Container.MP4, duration = jsonMedia.get('durationInMilliseconds') ,bitrate = links.get('bitrateKbps'),parts = [PartObject(key = RTMPVideoURL(links['uri'].split('mp4:')[0], clip = 'mp4:' +  links['uri'].split('mp4:')[1], width = None if 'width' not in links else links['width'], height = None if 'height' not in links else links['height'], live = False) )])
#			elif links['fileType'] == 'wma':
#				mo = MediaObject(duration = jsonMedia.get('durationInMilliseconds') ,bitrate = links.get('bitrateKbps'),parts = [PartObject(key = WindowsMediaVideoURL(links['uri'], width=None if 'width' not in links else links['width'], height=None if 'height' not in links else links['height']))])
#			elif links['fileType'] == 'mp3':
#				mo = MediaObject(duration = jsonMedia.get('durationInMilliseconds') ,bitrate = links.get('bitrateKbps'),parts = [PartObject(key = Callback(PlayMP3, url = links['uri'], ext='.mp3'))])
#			mol.append(mo)
#	except:
#		mol.append(MediaObject(duration = jsonMedia.get('durationInMilliseconds') ,bitrate = links.get('bitrateKbps'),parts = [PartObject(key = jsonDrOD['mediaItemResourceUrl'] )]))
# 
#	return mol
# 
# ####################################################################################################
# def PlayMP3(url):
# 
#	return Redirect(url)
#===============================================================================
